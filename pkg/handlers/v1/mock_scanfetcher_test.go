// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/asecurityteam/nexpose-scan-notifier/pkg/domain (interfaces: ScanFetcher)

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	domain "github.com/asecurityteam/nexpose-scan-notifier/pkg/domain"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockScanFetcher is a mock of ScanFetcher interface
type MockScanFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockScanFetcherMockRecorder
}

// MockScanFetcherMockRecorder is the mock recorder for MockScanFetcher
type MockScanFetcherMockRecorder struct {
	mock *MockScanFetcher
}

// NewMockScanFetcher creates a new mock instance
func NewMockScanFetcher(ctrl *gomock.Controller) *MockScanFetcher {
	mock := &MockScanFetcher{ctrl: ctrl}
	mock.recorder = &MockScanFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScanFetcher) EXPECT() *MockScanFetcherMockRecorder {
	return m.recorder
}

// FetchScans mocks base method
func (m *MockScanFetcher) FetchScans(arg0 context.Context, arg1 time.Time) ([]domain.CompletedScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchScans", arg0, arg1)
	ret0, _ := ret[0].([]domain.CompletedScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchScans indicates an expected call of FetchScans
func (mr *MockScanFetcherMockRecorder) FetchScans(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchScans", reflect.TypeOf((*MockScanFetcher)(nil).FetchScans), arg0, arg1)
}
