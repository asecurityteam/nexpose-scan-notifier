// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/asecurityteam/nexpose-scan-notifier/pkg/domain (interfaces: TimestampFetcher,TimestampStorer)

// Package dependencycheck is a generated GoMock package.
package dependencycheck

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockTimestampFetcher is a mock of TimestampFetcher interface
type MockTimestampFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockTimestampFetcherMockRecorder
}

// MockTimestampFetcherMockRecorder is the mock recorder for MockTimestampFetcher
type MockTimestampFetcherMockRecorder struct {
	mock *MockTimestampFetcher
}

// NewMockTimestampFetcher creates a new mock instance
func NewMockTimestampFetcher(ctrl *gomock.Controller) *MockTimestampFetcher {
	mock := &MockTimestampFetcher{ctrl: ctrl}
	mock.recorder = &MockTimestampFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTimestampFetcher) EXPECT() *MockTimestampFetcherMockRecorder {
	return m.recorder
}

// FetchTimestamp mocks base method
func (m *MockTimestampFetcher) FetchTimestamp(arg0 context.Context) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTimestamp", arg0)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTimestamp indicates an expected call of FetchTimestamp
func (mr *MockTimestampFetcherMockRecorder) FetchTimestamp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTimestamp", reflect.TypeOf((*MockTimestampFetcher)(nil).FetchTimestamp), arg0)
}

// MockTimestampStorer is a mock of TimestampStorer interface
type MockTimestampStorer struct {
	ctrl     *gomock.Controller
	recorder *MockTimestampStorerMockRecorder
}

// MockTimestampStorerMockRecorder is the mock recorder for MockTimestampStorer
type MockTimestampStorerMockRecorder struct {
	mock *MockTimestampStorer
}

// NewMockTimestampStorer creates a new mock instance
func NewMockTimestampStorer(ctrl *gomock.Controller) *MockTimestampStorer {
	mock := &MockTimestampStorer{ctrl: ctrl}
	mock.recorder = &MockTimestampStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTimestampStorer) EXPECT() *MockTimestampStorerMockRecorder {
	return m.recorder
}

// StoreTimestamp mocks base method
func (m *MockTimestampStorer) StoreTimestamp(arg0 context.Context, arg1 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreTimestamp", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreTimestamp indicates an expected call of StoreTimestamp
func (mr *MockTimestampStorerMockRecorder) StoreTimestamp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreTimestamp", reflect.TypeOf((*MockTimestampStorer)(nil).StoreTimestamp), arg0, arg1)
}
